  name: Build and Deploy to Prod On Release Tag Push
  on:
    push:
      tags:
        - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  env:
    GITHUB_USERNAME : ${{ secrets.REPO_ACCESS_NAME}}
    GITHUB_TOKEN : ${{ secrets.REPO_ACCESS_TOKEN}} # scope all repos
    #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # scope this repo
    ACR_REGISTRY_NAME: myjavaacr.azurecr.io
    AKS_CLUSTER_NAME: myjavak8s
    AKS_CLUSTER_RESOURCE_GROUP: AKS-DEMO-RG
    ACR_PULL_SECRET : myjavaacr-secret

  jobs:
    build_and_publish:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
            java-version: 11

        - name: Set the env value
          id: step_one
          run: |
            echo "GITHUB_USERNAME=$GITHUB_USERNAME" >> $GITHUB_ENV
            echo "GITHUB_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
            echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

        - name: echo the env value
          id: step_two
          run: |
            echo "GITHUB_USERNAME is ${{ env.GITHUB_USERNAME }}"
            echo "GITHUB_TOKEN is ${{ env.GITHUB_TOKEN }}"
            echo "RELEASE_VERSION is ${{ env.RELEASE_VERSION }}"
        - name: Build with Maven
          if: success()
          run: mvn -B package --file pom.xml

        - name: Docker Setup Buildx
          uses: docker/setup-buildx-action@v1.1.1

        - name: Cache Docker layers
          uses: actions/cache@v2
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-buildx-

        - name: Azure Container Registry Login
          uses: Azure/docker-login@v1
          with:
            # Container registry username
            username: ${{ secrets.ACR_USER_NAME}}
            # Container registry password
            password: ${{ secrets.ACR_ACCESS_KEY}}
            # Container registry server url
            login-server: ${{ env.ACR_REGISTRY_NAME }}

        - name: Master Branch Build and push Docker images
          if: success() 
          uses: docker/build-push-action@v2.3.0
          with:
            push: true
            context: .
            tags: ${{ env.ACR_REGISTRY_NAME }}/address-service:${{ env.RELEASE_VERSION }}

    deploy_to_prod:
      needs:
        - build_and_publish
      runs-on: ubuntu-latest
      environment: prod
      env:
        AKS_DEPLOY_NAMESPACE:
      steps:
        - name: Set the env value
          id: step_one
          run: |
            echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

          # Set the target Azure Kubernetes Service (AKS) cluster.
        - uses: Azure/aks-set-context@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            cluster-name: ${{ env.AKS_CLUSTER_NAME }}
            resource-group: ${{ env.AKS_CLUSTER_RESOURCE_GROUP }}

        # Create namespace if doesn't exist
        - run: |
            kubectl create namespace ${{ env.AKS_DEPLOY_NAMESPACE }} --dry-run -o json | kubectl apply -f -

        # Create image pull secret for ACR
        - uses: azure/k8s-create-secret@v1
          with:
            container-registry-url: ${{ env.ACR_REGISTRY_NAME }}
            container-registry-username: ${{ secrets.ACR_USER_NAME}}
            container-registry-password: ${{ secrets.ACR_ACCESS_KEY}}
            secret-name: ${{ env.ACR_PULL_SECRET }}
            namespace: ${{ env.AKS_DEPLOY_NAMESPACE }}
            force: true

          # Deploy app to AKS
        - uses: Azure/k8s-deploy@v1.2
          with:
            manifests: |
              aks/prod/deployment.yaml
              aks/prod/service.yaml
              aks/prod/ingress.yaml
              aks/prod/hpa-deployment.yaml
              
            images: |
              myjavaacr.azurecr.io/address-service:${{ env.RELEASE_VERSION }}
            imagepullsecrets: |
              ${{ env.ACR_PULL_SECRET }}
            namespace: ${{ env.AKS_DEPLOY_NAMESPACE }}

        
